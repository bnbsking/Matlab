def binc(n):
    A=[]; B=[]
    for i in range(2**n):
        A.append(bin(int(i)))
    for i in range(2**n):
        t=A[i]
        B.append(t[2:len(t)])
        while len(B[i])<(n):
            B[i]="0"+B[i]
    return B
    
def greyc(n):
    if n==1:
        return binc(1)
    else:
        t=greyc(n-1)
        s=greyc(n-1)
        s.reverse()
        A=[]
        for i in range(2**n):
            A.append(0)
        for i in range(2**(n-1)):
            A[i]="0"+t[i]
            A[i+2**(n-1)]="1"+s[i]
        return A

print(binc(1), "     " , binc(2),"    ", binc(3))
print(greyc(3))

import numpy as np

def bitwiseproduct(x,y):
    t=0
    for i in range(len(x)):
        t=t+int(x[i])*int(y[i])
    return t

def fun(n):
    M=np.zeros((2**n,2**n))
    t=binc(n)
    s=greyc(n)
    for i in range(2**n):
        for j in range(2**n):
            M[i][j]=(-1)**(bitwiseproduct(t[i],s[j]))
    return M
 
for i in range(1,5-1):
    M=fun(i)
    print(M.transpose())
    print()

from numpy.linalg import inv

M=fun(3)
M=M.transpose()

T=np.array([ [0.6435],[3.1416],[0.9273],[-0.9273],[0.6987],[-1.9452],[1.9452],[-0.6987] ])
0.125*M.dot(T)
