#WZP algorithm simulation by Bobo
import math
import numpy as np
from numpy import linalg as LA
from numpy.linalg import inv
from math import pi
from qiskit import QuantumCircuit as QCirc, ClassicalRegister as CReg, QuantumRegister as QReg, execute as exe
from qiskit.tools.visualization import circuit_drawer as CDraw
from qiskit.quantum_info import state_fidelity as SFad 
from qiskit import BasicAer as BAer
from qiskit.tools.visualization import matplotlib_circuit_drawer as drawer, qx_color_scheme
#u3 or cu3 (theta,phi,lambda),    u3^H(theta,-lambda,-phi)

A=np.array([ [2,1],[1,2] ])
b=np.array([ [1],[0] ])
A_1 = inv(A)
x_real = A_1.dot(b)
x_real = x_real / LA.norm(x_real)
x_real = [round(x_real[0][0],8),round(x_real[1][0],8)]

v=np.array([ b[0][0], b[1][0] ])
v=v/LA.norm(v)
print("initial state: ", v)

qr = QReg(6)                                                #create 4 quantum register named qr
c = QCirc(qr)                                            #create quantum circuit for qr and cr named c

c.initialize(v,[qr[1]]) #reversed order


c.h(qr[4]) #QRAM
c.h(qr[1]); c.h(qr[2]); c.h(qr[3]); #H

c.cu3(-1.2025,+2.1112,-1.0304,qr[4],qr[5])
c.u1(+0.7854,qr[4])
c.cx(qr[3],qr[4])
c.cu3(-1.2025,-2.1112,+1.0304,qr[4],qr[5])
c.u1(-0.7854,qr[4])
c.cx(qr[3],qr[4])
c.cu3(-1.2025,2.1112,-1.0304,qr[3],qr[5]) 
c.u1(0.7854,qr[3])
c.x(qr[4]) #X gate
c.cu3(+1.2025,-2.1112,+1.0304,qr[4],qr[5])
c.u1(+0.7854,qr[4])
c.cx(qr[3],qr[4])
c.cu3(+1.2025,+2.1112,-1.0304,qr[4],qr[5])
c.u1(-0.7854,qr[4])
c.cx(qr[3],qr[4])
c.cu3(+1.2025,-2.1112,+1.0304,qr[3],qr[5])
c.u1(0.7854,qr[3])
c.x(qr[4]) #X gate
c.cx(qr[3],qr[4]) #end CW
c.ccx(qr[2],qr[4],qr[5])
c.cu3(-2.5740,0,0,qr[2],qr[5])
c.ccx(qr[2],qr[4],qr[5]) #end CW2
c.cu3(2*pi,0,0,qr[1],qr[5])
c.ccx(qr[1],qr[4],qr[5])
c.cu3(1.1352,0,0,qr[1],qr[5])
c.ccx(qr[1],qr[4],qr[5]) #end CW4

c.swap(qr[1],qr[3])
c.h(qr[3])
c.cu3(0,-pi/2,0,qr[3],qr[2])
c.u1(-pi/4,qr[3])
c.h(qr[2])
c.cu3(0,-pi/4,0,qr[3],qr[1])
c.u1(-pi/8,qr[3])
c.cu3(0,-pi/2,0,qr[2],qr[1])
c.u1(-pi/4,qr[2])
c.h(qr[1])

c.ry(0.4731375,qr[0])
c.cx(qr[1],qr[0])
c.ry(0.5805375,qr[0])
c.cx(qr[2],qr[0])
c.ry(-0.5440875,qr[0])
c.cx(qr[1],qr[0])
c.ry(0.1615125,qr[0])
c.cx(qr[3],qr[0])
c.ry(0.7847625,qr[0])
c.cx(qr[1],qr[0])
c.ry(-0.5440875,qr[0])
c.cx(qr[2],qr[0])
c.ry(-0.7414125,qr[0])
c.cx(qr[1],qr[0])
c.ry(0.4731375,qr[0])
c.cx(qr[3],qr[0])

c.draw(output='mpl')




Usim = BAer.get_backend('statevector_simulator')
job = exe(c, Usim)
X = job.result().get_statevector(c, decimals=3)
print(X)

#|1><1| projective measurement only half down indices remains.
#(original order & index start from 1)

x = np.array([X[2-1],X[34-1]])
x = x / LA.norm(x)
print("simulation answer: ", x)
print("true answer: ", x_real)

f=round((abs(x[0]*x_real[0]+x[1]*x_real[1]))**2,4)
print("state fidelity: ",f)

#backend = BAer.get_backend('unitary_simulator')
#job2 = exe(c, backend)
#Y=job2.result().get_unitary(c, decimals=4)
#print(Y)

#backend = BAer.get_backend('qasm_simulator')
#job = exe(c, backend, shots=1024)
#job.result().get_counts(c)


